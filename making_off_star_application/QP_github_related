
Add the below script in your bashrc file. Move to the end of the file and paste the below script snippet.

----------------------------------------------------------------------------------------------
$ gedit ~/.bashrc
 
	# Git branch in prompt.
parse_git_branch() {
git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
export PS1="\u@\h \W\[\033[32m\]\$(parse_git_branch)\[\033[00m\] $"

----------------------------------------------------------------------------------------------


GitHub Basic steps to add your code on to git repository:
----------------------------------------------------------

git init 

git add ---(whatever files)

git commit -m "first message"

git remote add origin repository_name (will generate appopriate config file and related information)

git push origin master 

----------------------------------------------------------------------------------------------


** Install Git conflict solve tool - Meld 

sudo apt-get update && sudo apt-get install meld

* When you receive CONFLICT , your current branch got changed with (no branch)..

git mergetool

Solve conflict with tool (refered meld ..)

After solving conflict ...

Only "git add"  those file whichver got changed.

Then , 

git rebase --continue 

This command will continue with rebase code with local code .. and retrive back on TRACK like (no branch) --> current_branch..

Then you can easily 

git push origin current_branch

----------------------------------------------------------------------------------------

Checking for existing SSH keys

1 Open Terminal.
2 Enter ls -al ~/.ssh to see if existing SSH keys are present:
	ls -al ~/.ssh
	# Lists the files in your .ssh directory, if they exist

3 Check the directory listing to see if you already have a public SSH key.
By default, the filenames of the public keys are one of the following:

		id_dsa.pub
		id_ecdsa.pub
		id_ed25519.pub
		id_rsa.pub

----------------------------------------------------------------------------------------

Generating a new SSH key and adding it to the ssh-agent

1 Open Terminal.
2 Paste the text below, substituting in your GitHub email address.

ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

3 When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.

	Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]

4 At the prompt, type a secure passphrase. For more information, see "Working with SSH key passphrases".
	Enter passphrase (empty for no passphrase): [Type a passphrase]
	Enter same passphrase again: [Type passphrase again]


Also set default configuration on your local machine:

	git config --global user.email 'rahulpatil2387@gmail.com'
	git config --global user.name 'Rahul Patil'

----------------------------------------------------------------------------------------
