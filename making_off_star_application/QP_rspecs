Quick Pointers For Using Rspecs in to your rails App:  (28/07/14)
*****************************************************
Links:
------

https://github.com/rspec/rspec-rails
http://arjanvandergaag.nl/blog/factory_girl_tips.html (factory-girl)
http://railsguides.net/integral-factories-in-tests-with-factory-girl/

-----------------------------------------------------------------------------------------
STEP # 1:

ADD GEMS:
Following gems shold be add into your Gemfile 
# Gemfile
group :development, :test do
  gem 'factory_girl_rails'
  gem 'rspec-rails'
#  gem 'thin'  # right now not reqiure 
end


group :test do
  gem 'capybara'
#  gem 'cucumber-rails', :require=>false   # This is optional if you want to cover cucumber scenario also then add.
  gem 'database_cleaner', '1.0.1'
#  gem 'email_spec'  # For basic testing not require
  gem 'launchy'
end

OR //

group :development, :test do
  gem 'sqlite3'
  gem 'rspec-rails'#, '~> 2.14.1'
  gem 'capybara'#, '~> 2.2.1'
  gem 'factory_girl_rails'
  gem 'database_cleaner'#, :git => "git://github.com/bmabey/database_cleaner.git"
  gem 'selenium-webdriver'
end


OR / (Latest for rails 4.1)


group :development, :test do
  gem "rspec-rails", "~> 3.1.0"
  gem "factory_girl_rails", "~> 4.4.1"
  gem 'guard-rspec', '~> 4.3.1'
  gem 'spring-commands-rspec', '~> 1.0.2'
end

group :test do
  gem "faker", "~> 1.4.3"
  gem "capybara", "~> 2.4.3"
  gem "database_cleaner", "~> 1.3.0"
  gem "launchy", "~> 2.4.2"
  gem "selenium-webdriver", "~> 2.43.0"
  gem 'shoulda-matchers', '~> 2.6.2'
end

-----------------------------------------------------------------------------------------
bundle install 
-----------------------------------------------------------------------------------------

STEP # 2:

Rails generator commands:

--> rails generate rspec:install
[ or / ]
--> rails g rspec:install


Already Existing Controllers create specs by:

rails g rspec:controller articles

rails g rspec:model article

*********************************************************************************************

*** Introduction of FactoryGirl (in rails_helper.rb)

# --------------------------For FactoryGirl Added Following Configurations ------------
  config.include FactoryGirl::Syntax::Methods

  config.before(:suite) do
    DatabaseCleaner.strategy = :truncation
    DatabaseCleaner.clean_with(:truncation)
  end

  # Cleaning worked because gem was sourced from github
  config.around(:each) do |example|
    DatabaseCleaner.cleaning do
      example.run
    end
  end
# ----------------------------------------------------------------------------

*********************************************************************************************

*********************************************************************************************
RSPEC .rspec file configuration for console display:
-----------------------------------------------------

--color
--format documentation
--order default
--require spec_helper

*********************************************************************************************


config.generators do |g|
  g.orm             :active_record
  g.template_engine :erb
  g.test_framework  :test_unit, fixture: false
  g.stylesheets     false
  g.javascripts     false
end


#  config/application.rb

config.generators do |g|
        g.test_framework :rspec,
                fixtures: true,
                view_specs: false,
                helper_specs: false,
                routing_specs: false,
                controller_specs: true,
                request_specs: false
                g.fixture_replacement :factory_girl, dir: "spec/factories"
    end



-----------------------------------------------------------------------------------------
PREPARE TEST ENV:

rake db:migrate && rake db:test:prepare

RAILS_ENV=test rails c

-----------------------------------------------------------------------------------------

rake db:create:all

rake db:migrate RAILS_ENV=test

For run specs :

# Run only model specs
bundle exec rspec spec/models

# Run only specs for AccountsController
bundle exec rspec spec/controllers/accounts_controller_spec.rb

# Run only specific or single test 
bundle exec rspec spec/controllers/routes_controller_spec.rb:46

bundle exec rspec spec/controllers/

rake spec / rspec spec

In order to make color enable on console while running specs 
# Add following line at your /spec/spec_helper.rb file
config.color = true

-----------------------------------------------------------------------------------------
FOR THIS STAR RATING APP:-

rake db:test:prepare

rake sunspot:solr:start RAILS_ENV=test

rspec 

-----------------------------------------------------------------------------------------

After adding device wanted to compatiable with existing rspec test-cases then need to add following code :

  before(:each){
    @request.env["devise.mapping"] = Devise.mappings[:user]
  }

# POST action ----------

before(:each){
      # debugger
      @user = FactoryGirl.create(:user)
      sign_in @user
    }

After adding this try by running test case you might get following exception ..

 NoMethodError:
       undefined method `sign_in' for #<RSpec


The ideal solution would be to create a file at spec/support/devise.rb and include the devise test helpers in the Rspec config through the following code:

Rspec.configure do |config|
  config.include Devise::TestHelpers, :type => :controller
end

-----------------------------------------------------------------------------------------


Addition to this add Capybara in app:


1. Add gem in Gemfile

gem 'capybara'


2. Add these two require statements beneath: rails_helper.rb @ spec directory

require 'capybara/rails'
require 'capybara/rspec'


3. Next, in the RSpec.configure

config.include FactoryGirl::Syntax::Methods

config.before(:suite) do
  DatabaseCleaner.strategy = :truncation
end

config.before(:each) do
  DatabaseCleaner.start
end

config.after(:each) do
  DatabaseCleaner.clean
end

4. create a folder called features. Now you are ready to use Capybara and FactoryGirl for your tests!


  In your new features folder, create a file called anything_spec.rb / main_spec.rb and put this code in it:


  Start with simple code like:

  require 'rails_helper'

describe "Launch Application" do

  before :each do
    visit root_path
  end

end






